name: Production Grade CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    defaults:
      run:
        working-directory: ./backend
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Use Node.js ${{ matrix.node-version }}'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - name: 'Install dependencies'
      run: npm ci
    - name: 'Run tests'
      run: npm test
      continue-on-error: true

  codeql-scan:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Initialize CodeQL'
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
    - name: 'Perform CodeQL Analysis'
      uses: github/codeql-action/analyze@v3

  build-scan-push:
    name: Build, Scan and Push Image
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Build a Docker image'
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/getting-started-todo-app:${{ github.sha }} .
    - name: 'Run Trivy vulnerability scanner'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.ACR_NAME }}.azurecr.io/getting-started-todo-app:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    - name: 'Upload Trivy scan results to GitHub Security tab'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    - name: 'Log in to Azure with OIDC'
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: 'Push image to ACR'
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/getting-started-todo-app:${{ github.sha }}

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: [codeql-scan, build-scan-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: 'Log in to Azure with OIDC'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: 'Update manifest with image name'
      run: |
        sed -i 's|__IMAGE_NAME_PLACEHOLDER__|${{ secrets.ACR_NAME }}.azurecr.io/getting-started-todo-app:${{ github.sha }}|g' ./deployment.yaml
    - name: 'Set K8s context'
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        cluster-name: ${{ secrets.CLUSTER_NAME }}
    - name: 'Deploy to K8s cluster'
      uses: azure/k8s-deploy@v4
      with:
        action: 'deploy'
        manifests: |
         ./deployment.yaml